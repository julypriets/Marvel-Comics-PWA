{"version":3,"sources":["logo.svg","Components/Comic.js","Components/ComicList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","comic","props","Card","bg","Body","Title","name","Text","uri","ComicList","state","comics","fetch","method","headers","ts","apikey","hash","mode","then","response","json","jsonData","console","log","setState","results","items","catch","error","this","map","item","index","resourceURI","key","className","Container","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,sMCiB5BC,EAdD,SAACC,GAEX,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,GAAG,SACR,kBAACD,EAAA,EAAKE,KAAN,KACG,kBAACF,EAAA,EAAKG,MAAN,KAAaJ,EAAMK,MACnB,kBAACJ,EAAA,EAAKK,KAAN,KAAaN,EAAMO,SC6CpBC,E,YA7Cb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KALRS,MAAQ,CACNC,OAAQ,IAKRC,MAAM,sDAAuD,CAC3DC,OAAQ,MACRC,QAAS,CACPC,GAAI,SACJC,OAAQ,mCACRC,KAAM,oCAERC,KAAM,YAELC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAEJC,QAAQC,IAAI,qBACZD,QAAQC,IAAIF,GAGZ,EAAKG,SAAS,CACVd,OAAQW,EAASI,QAAQf,OAAOgB,QAEpCJ,QAAQC,IAAI,gBACZD,QAAQC,IAAI,EAAKd,UAElBkB,OAAM,SAAAC,GAELN,QAAQM,MAAMA,MA1BD,E,sEA+BjB,IAAMlB,EAASmB,KAAKpB,MAAMC,OAAOoB,KAAI,SAACC,EAAMC,GAC1C,OAAO,kBAAC,EAAD,CAAO3B,KAAM0B,EAAK1B,KAAME,IAAKwB,EAAKE,YAAaC,IAAKF,OAG7D,OACE,yBAAKG,UAAU,OACb,kBAACC,EAAA,EAAD,KACK1B,Q,GA3CW2B,aCSTC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCGAI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT5B,MAAK,SAAAiC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BlC,QAAQC,IACN,iHAKEwB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB7B,QAAQC,IAAI,sCAGRwB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BxB,OAAM,SAAAC,GACLN,QAAQM,MAAM,4CAA6CA,MC1FjE+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwBvB,OAAOC,SAASuB,MACpDC,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,GAAN,sBAEPzB,IAgEV,SAAiCO,EAAOC,GAEtCpC,MAAMmC,GACH5B,MAAK,SAAAC,GAEJ,IAAMiD,EAAcjD,EAASN,QAAQwD,IAAI,gBAEnB,MAApBlD,EAASmD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAMtD,MAAK,SAAAiC,GACjCA,EAAasB,aAAavD,MAAK,WAC7BuB,OAAOC,SAASgC,eAKpB7B,EAAgBC,EAAOC,MAG1BpB,OAAM,WACLL,QAAQC,IACN,oEArFAoD,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAMtD,MAAK,WACjCI,QAAQC,IACN,iHAMJsB,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.3c748275.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport { Card} from 'react-bootstrap';\n\nconst comic = (props) => {\n\n    return(\n        <div >\n            <Card bg=\"light\">\n             <Card.Body>\n                <Card.Title>{props.name}</Card.Title>\n                <Card.Text >{props.uri}</Card.Text>\n             </Card.Body>\n            </Card>\n        </div>\n    )\n}\n\nexport default comic;","import React, { Component } from \"react\";\nimport \"./Comic.css\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport Comic from \"./Comic\";\n\nclass ComicList extends Component {\n  state = {\n    comics: []\n  };\n\n  constructor(props) {\n    super(props);\n    fetch(\"https://gateway.marvel.com:443/v1/public/characters\", {\n      method: \"GET\",\n      headers: {\n        ts: \"marvel\",\n        apikey: \"7cd30d3697116382070d9597a4e7efd2\",\n        hash: \"9ce76949b277621ebd38b71889f6f53e\",\n      },\n      mode: 'no-cors'\n    })\n      .then(response => response.json())\n      .then(jsonData => {\n        // jsonData is parsed json object received from url\n        console.log(\"This is the data!\")\n        console.log(jsonData);\n\n        //Cambio el estado de la aplicaciÃ³n\n        this.setState({\n            comics: jsonData.results.comics.items\n        });\n        console.log(\"The state is\");\n        console.log(this.state);\n      })\n      .catch(error => {\n        // handle your errors here\n        console.error(error);\n      });\n  }\n\n  render() {\n    const comics = this.state.comics.map((item, index) => {\n      return <Comic name={item.name} uri={item.resourceURI} key={index} />;\n    });\n\n    return (\n      <div className=\"App\">\n        <Container>\n            {comics}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default ComicList;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport ComicList from './Components/ComicList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ComicList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}